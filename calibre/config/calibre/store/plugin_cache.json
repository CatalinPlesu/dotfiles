{
  "amazon": "#!/usr/bin/env python\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 20  # Needed for dynamic plugin loading\n\nfrom calibre.gui2.store import StorePlugin\n\ntry:\n    from calibre.gui2.store.amazon_base import AmazonStore\nexcept ImportError:\n    class AmazonStore:\n        minimum_calibre_version = 9999, 0, 0\n\n\nclass Base(AmazonStore):\n    scraper_storage = []\n\n\nclass AmazonKindleStore(Base, StorePlugin):\n    pass\n\n\nif __name__ == '__main__':\n    Base().develop_plugin()\n",
  "amazon_au": "#!/usr/bin/env python\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 20  # Needed for dynamic plugin loading\n\nfrom calibre.gui2.store import StorePlugin\n\ntry:\n    from calibre.gui2.store.amazon_base import AmazonStore\nexcept ImportError:\n    class AmazonStore:\n        minimum_calibre_version = 9999, 0, 0\n\n\nclass Base(AmazonStore):\n    scraper_storage = []\n    SEARCH_BASE_URL = 'https://www.amazon.com.au/s/'\n    SEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\n    DETAILS_URL = 'https://amazon.com.au/dp/'\n    STORE_LINK =  'https://www.amazon.com.au'\n\n\nclass AmazonKindleStore(Base, StorePlugin):\n    pass\n\n\nif __name__ == '__main__':\n    Base().develop_plugin()\n",
  "amazon_ca": "#!/usr/bin/env python\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 20  # Needed for dynamic plugin loading\n\nfrom calibre.gui2.store import StorePlugin\n\ntry:\n    from calibre.gui2.store.amazon_base import AmazonStore\nexcept ImportError:\n    class AmazonStore:\n        minimum_calibre_version = 9999, 0, 0\n\n\nclass Base(AmazonStore):\n    scraper_storage = []\n    SEARCH_BASE_URL = 'https://www.amazon.ca/s/'\n    SEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\n    DETAILS_URL = 'https://amazon.ca/dp/'\n    STORE_LINK =  'https://www.amazon.ca'\n\n\nclass AmazonKindleStore(Base, StorePlugin):\n    pass\n\n\nif __name__ == '__main__':\n    Base().develop_plugin()\n",
  "amazon_de": "#!/usr/bin/env python\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 16  # Needed for dynamic plugin loading\n\nfrom calibre.gui2.store import StorePlugin\n\ntry:\n    from calibre.gui2.store.amazon_base import AmazonStore\nexcept ImportError:\n    class AmazonStore:\n        minimum_calibre_version = 9999, 0, 0\n\n\nclass Base(AmazonStore):\n    scraper_storage = []\n    SEARCH_BASE_URL = 'https://www.amazon.de/s/'\n    SEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\n    BY = 'von'\n    KINDLE_EDITION = 'Kindle Ausgabe'\n    DETAILS_URL = 'https://amazon.de/dp/'\n    STORE_LINK =  'https://www.amazon.de'\n\n\nclass AmazonKindleStore(Base, StorePlugin):\n    pass\n\n\n\nif __name__ == '__main__':\n    Base().develop_plugin()\n",
  "amazon_es": "#!/usr/bin/env python\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 15  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\n\ntry:\n    from urllib.parse import urlencode\nexcept ImportError:\n    from urllib import urlencode\n\nfrom lxml import html\nfrom qt.core import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'https://www.amazon.es/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nBY = 'de'\nKINDLE_EDITION = 'Versi√≥n Kindle'\nDETAILS_URL = 'https://amazon.es/dp/'\nSTORE_LINK =  'https://www.amazon.es'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.items()}\n    url = base_url + '?' + urlencode(uquery)\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[@title=\"%s\"]/@title' % KINDLE_EDITION\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"%s \")]/following-sibling::span//text()' % BY\n            price_xpath = ('descendant::div[@class=\"a-row a-spacing-none\" and'\n                           ' not(span[contains(@class, \"kindle-unlimited\")])]//span[contains(@class, \"s-price\")]//text()')\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print(result)\n",
  "amazon_fr": "#!/usr/bin/env python\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 16  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\n\ntry:\n    from urllib.parse import urlencode\nexcept ImportError:\n    from urllib import urlencode\n\nfrom lxml import etree, html\nfrom qt.core import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'https://www.amazon.fr/s/'\nSEARCH_BASE_QUERY = {'i': 'digital-text'}\nBY = 'de'\nKINDLE_EDITION = 'Format Kindle'\nDETAILS_URL = 'https://amazon.fr/dp/'\nSTORE_LINK =  'https://www.amazon.fr'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='k'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.items()}\n    url = base_url + '?' + urlencode(uquery)\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        for result in doc.xpath('//div[contains(@class, \"s-result-list\")]//div[@data-index and @data-asin]'):\n            kformat = ''.join(result.xpath('.//a[contains(text(), \"{}\")]//text()'.format(KINDLE_EDITION)))\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            if 'kindle' not in kformat.lower():\n                continue\n            asin = result.get('data-asin')\n            if not asin:\n                continue\n\n            cover_url = ''.join(result.xpath('.//img/@src'))\n            title = etree.tostring(result.xpath('.//h2')[0], method='text', encoding='unicode')\n            adiv = result.xpath('.//div[contains(@class, \"a-color-secondary\")]')[0]\n            aparts = etree.tostring(adiv, method='text', encoding='unicode').split()\n            idx = aparts.index(BY)\n            author = ' '.join(aparts[idx+1:]).split('|')[0].strip()\n            price = ''\n            for span in result.xpath('.//span[contains(@class, \"a-price\")]/span[contains(@class, \"a-offscreen\")]'):\n                q = ''.join(span.xpath('./text()'))\n                if q:\n                    price = q\n                    break\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.detail_item = asin.strip()\n            s.price = price.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print(result)\n",
  "amazon_in": "#!/usr/bin/env python\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 20  # Needed for dynamic plugin loading\n\nfrom calibre.gui2.store import StorePlugin\n\ntry:\n    from calibre.gui2.store.amazon_base import AmazonStore\nexcept ImportError:\n    class AmazonStore:\n        minimum_calibre_version = 9999, 0, 0\n\n\nclass Base(AmazonStore):\n    scraper_storage = []\n    SEARCH_BASE_URL = 'https://www.amazon.in/s/'\n    SEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\n    DETAILS_URL = 'https://amazon.in/dp/'\n    STORE_LINK =  'https://www.amazon.in'\n\n\nclass AmazonKindleStore(Base, StorePlugin):\n    pass\n\n\nif __name__ == '__main__':\n    Base().develop_plugin()\n",
  "amazon_it": "#!/usr/bin/env python\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 15  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\n\ntry:\n    from urllib.parse import urlencode\nexcept ImportError:\n    from urllib import urlencode\n\nfrom lxml import html\nfrom qt.core import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'https://www.amazon.it/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nBY = 'di'\nKINDLE_EDITION = 'Formato Kindle'\nDETAILS_URL = 'https://amazon.it/dp/'\nSTORE_LINK =  'https://www.amazon.it'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.items()}\n    url = base_url + '?' + urlencode(uquery)\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[@title=\"%s\"]/@title' % KINDLE_EDITION\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"%s \")]/following-sibling::span//text()' % BY\n            price_xpath = ('descendant::div[@class=\"a-row a-spacing-none\" and'\n                           ' not(span[contains(@class, \"kindle-unlimited\")])]//span[contains(@class, \"s-price\")]//text()')\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print(result)\n",
  "amazon_mx": "#!/usr/bin/env python\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nstore_version = 1  # Needed for dynamic plugin loading\n\nfrom calibre.gui2.store import StorePlugin\n\ntry:\n    from calibre.gui2.store.amazon_base import AmazonStore\nexcept ImportError:\n    class AmazonStore:\n        minimum_calibre_version = 9999, 0, 0\n\n\nclass Base(AmazonStore):\n    scraper_storage = []\n    SEARCH_BASE_URL = 'https://www.amazon.com.mx/s/'\n    SEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\n    DETAILS_URL = 'https://amazon.com.mx/dp/'\n    STORE_LINK =  'https://www.amazon.com.mx'\n\n\nclass AmazonKindleStore(Base, StorePlugin):\n    pass\n\n\nif __name__ == '__main__':\n    Base().develop_plugin()\n",
  "amazon_uk": "#!/usr/bin/env python\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 20  # Needed for dynamic plugin loading\n\nfrom calibre.gui2.store import StorePlugin\n\ntry:\n    from calibre.gui2.store.amazon_base import AmazonStore\nexcept ImportError:\n    class AmazonStore:\n        minimum_calibre_version = 9999, 0, 0\n\n\nclass Base(AmazonStore):\n    scraper_storage = []\n    SEARCH_BASE_URL = 'https://www.amazon.co.uk/s/'\n    SEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\n    DETAILS_URL = 'https://amazon.co.uk/dp/'\n    STORE_LINK =  'https://www.amazon.co.uk'\n\n\nclass AmazonKindleStore(Base, StorePlugin):\n    pass\n\n\nif __name__ == '__main__':\n    Base().develop_plugin()\n",
  "archive_org": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 4  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.opensearch_store import OpenSearchOPDSStore, open_search\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_URL =  'http://bookserver.archive.org/catalog/opensearch.xml'\n\n\ndef search(query, max_results=10, timeout=60):\n    for result in open_search(SEARCH_URL, query, max_results=max_results, timeout=timeout):\n        yield result\n\n\nclass ArchiveOrgStore(BasicStoreConfig, OpenSearchOPDSStore):\n\n    open_search_url = SEARCH_URL\n    web_url = 'http://www.archive.org/details/texts'\n\n    # http://bookserver.archive.org/catalog/\n\n    def search(self, query, max_results=10, timeout=60):\n        for s in search(query, max_results, timeout):\n            s.detail_item = 'http://www.archive.org/details/' + s.detail_item.split(':')[-1]\n            s.price = '$0.00'\n            s.drm = SearchResult.DRM_UNLOCKED\n            yield s\n\n\nif __name__ == '__main__':\n    import sys\n    for s in search(' '.join(sys.argv[1:])):\n        print(s)\n",
  "baen_webscription": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 2  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom contextlib import closing\n\ntry:\n    from urllib.parse import urlencode\nexcept ImportError:\n    from urllib import urlencode\n\nfrom lxml import html\nfrom qt.core import QUrl\n\nfrom calibre import browser\nfrom calibre.ebooks.metadata import authors_to_string\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\ndef search(query, max_results=10, timeout=60):\n    url = 'http://www.baen.com/catalogsearch/result/?' + urlencode(\n        {'q':query.lower(), 'dir':'desc', 'order':'relevance'})\n\n    br = browser()\n\n    counter = max_results\n    with closing(br.open_novisit(url, timeout=timeout)) as f:\n        raw = f.read()\n        root = html.fromstring(raw)\n        for data in root.xpath('//div[@id=\"productMatches\"]//table[@id=\"authorTable\"]//tr[contains(@class, \"IDCell\")]'):\n            if counter <= 0:\n                break\n\n            try:\n                book_url = data.xpath('./td[1]/a/@href[1]')[0]\n            except IndexError:\n                continue\n\n            try:\n                title = data.xpath('./td[2]/a[1]/text()')[0].strip()\n            except IndexError:\n                continue\n            try:\n                cover_url = data.xpath('./td[1]//img[1]/@src')[0]\n            except IndexError:\n                cover_url = ''\n\n            tails = [(b.tail or '').strip() for b in data.xpath('./td[2]/br')]\n            authors = [x[2:].strip() for x in tails if x.startswith('by ')]\n            author = authors_to_string(authors)\n            price = ''.join(data.xpath('.//span[@class=\"variantprice\"]/text()'))\n            a, b, price = price.partition('$')\n            price = b + price\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price\n            s.detail_item = book_url.strip()\n            s.drm = SearchResult.DRM_UNLOCKED\n            s.formats = 'RB, MOBI, EPUB, LIT, LRF, RTF, HTML'\n\n            yield s\n\n\nclass BaenWebScriptionStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'http://www.baenebooks.com/'\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(detail_item or url))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_item or url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search(query, max_results, timeout):\n            yield result\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search(' '.join(sys.argv[1:])):\n        print(result)\n",
  "beam_ebooks_de": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 4  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\ntry:\n    from urllib.parse import quote\nexcept ImportError:\n    from urllib2 import quote\nfrom contextlib import closing\n\nfrom lxml import html\nfrom qt.core import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass BeamEBooksDEStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'https://www.beam-shop.de/'\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = detail_item\n            open_url(QUrl(url))\n        else:\n            detail_url = None\n            if detail_item:\n                detail_url = detail_item\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'https://www.beam-shop.de/search?saltFieldLimitation=all&sSearch=' + quote(query)\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[contains(@class, \"product--box\")]'):\n                if counter <= 0:\n                    break\n\n                id_ = ''.join(data.xpath('./div/div[contains(@class, \"product--info\")]/a/@href')).strip()\n                if not id_:\n                    continue\n                cover_url = ''.join(data.xpath('./div/div[contains(@class, \"product--info\")]/a//img/@srcset'))\n                if cover_url:\n                    cover_url = cover_url.split(',')[0].strip()\n                author = data.xpath('.//a[@class=\"product--author\"]/text()')[0].strip()\n                title = data.xpath('.//a[@class=\"product--title\"]/text()')[0].strip()\n                price = data.xpath('.//div[@class=\"product--price\"]/span/text()')[0].strip()\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price\n                s.drm = SearchResult.DRM_UNLOCKED\n                s.detail_item = id_\n#                 s.formats = None\n                yield s\n",
  "bn": "# -*-\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 4  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\n\ntry:\n    from urllib.parse import quote_plus\nexcept ImportError:\n    from urllib import quote_plus\n\nfrom lxml import html\nfrom qt.core import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\ndef search_bn(query, max_results=10, timeout=60, write_html_to=''):\n    url = 'https://www.barnesandnoble.com/s/%s?keyword=%s&store=ebook&view=list' % (query.replace(' ', '-'), quote_plus(query))\n\n    br = browser()\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        for data in doc.xpath('//section[@id=\"gridView\"]//div[contains(@class, \"product-shelf-tile-book\")]'):\n            if counter <= 0:\n                break\n            counter -= 1\n\n            cover_url = ''\n            cover_div = data.xpath('.//div[contains(@class, \"product-shelf-image\")]')\n            if cover_div:\n                cover_url = 'https:' + ''.join(cover_div[0].xpath('descendant::img/@src'))\n\n            title_div = data.xpath('.//div[contains(@class, \"product-shelf-title\")]')\n            if not title_div:\n                continue\n            title = ''.join(title_div[0].xpath('descendant::a/text()')).strip()\n            if not title:\n                continue\n            item_url = ''.join(title_div[0].xpath('descendant::a/@href')).strip()\n            if not item_url:\n                continue\n            item_url = 'https://www.barnesandnoble.com' + item_url\n\n            author = ''\n            author_div = data.xpath('.//div[contains(@class, \"product-shelf-author\")]')\n            if author_div:\n                author = ''.join(author_div[0].xpath('descendant::a/text()')).strip()\n\n            price = ''\n            price_div = data.xpath('.//div[contains(@class, \"product-shelf-pricing\")]/div[contains(@class, \"current\")]')\n            if price_div:\n                spans = price_div[0].xpath('descendant::span')\n                if spans:\n                    price = ''.join(spans[-1].xpath('descendant::text()'))\n                    if '\\n' in price:\n                        price = price.split('\\n')[1].split(',')[0]\n\n            s = SearchResult()\n            s.cover_url = cover_url\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = item_url.strip()\n            s.drm = SearchResult.DRM_UNKNOWN\n            s.formats = 'Nook'\n            yield s\n\n\nclass BNStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = \"https://bn.com\"\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_item if detail_item else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_item)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        yield from search_bn(query, max_results, timeout)\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search_bn(' '.join(sys.argv[1:]), write_html_to='/t/bn.html'):\n        print(result)\n",
  "bubok_portugal": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 2  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2014, Rafael Vega <rafavega@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom contextlib import closing\n\ntry:\n    from urllib.parse import quote_plus\nexcept ImportError:\n    from urllib import quote_plus\n\nfrom lxml import html\nfrom qt.core import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass BubokPortugalStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'https://www.bubok.pt/tienda'\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_item if detail_item else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_item)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.bubok.pt/resellers/calibre_search/' + quote_plus(query)\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[contains(@class, \"libro\")]'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//div[@class=\"url\"]/text()'))\n\n                title = ''.join(data.xpath('.//div[@class=\"titulo\"]/text()'))\n\n                author = ''.join(data.xpath('.//div[@class=\"autor\"]/text()'))\n\n                price = ''.join(data.xpath('.//div[@class=\"precio\"]/text()'))\n\n                formats = ''.join(data.xpath('.//div[@class=\"formatos\"]/text()'))\n\n                cover = ''.join(data.xpath('.//div[@class=\"portada\"]/text()'))\n\n                counter -= 1\n\n                s = SearchResult()\n                s.title = title.strip()\n                s.author = author.strip()\n                s.detail_item = id.strip()\n                s.price = price.strip()\n                s.drm = SearchResult.DRM_UNLOCKED\n                s.formats = formats.strip()\n                s.cover_url = cover.strip()\n                yield s\n\n    def get_details(self, search_result, timeout):\n        return True\n",
  "bubok_publishing": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 2  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2014, Rafael Vega <rafavega@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom contextlib import closing\n\ntry:\n    from urllib.parse import quote_plus\nexcept ImportError:\n    from urllib import quote_plus\n\nfrom lxml import html\nfrom qt.core import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass BubokPublishingStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'https://www.bubok.es/tienda'\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_item if detail_item else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_item)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.bubok.es/resellers/calibre_search/' + quote_plus(query)\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[contains(@class, \"libro\")]'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//div[@class=\"url\"]/text()'))\n\n                title = ''.join(data.xpath('.//div[@class=\"titulo\"]/text()'))\n\n                author = ''.join(data.xpath('.//div[@class=\"autor\"]/text()'))\n\n                price = ''.join(data.xpath('.//div[@class=\"precio\"]/text()'))\n\n                formats = ''.join(data.xpath('.//div[@class=\"formatos\"]/text()'))\n\n                cover = ''.join(data.xpath('.//div[@class=\"portada\"]/text()'))\n\n                counter -= 1\n\n                s = SearchResult()\n                s.title = title.strip()\n                s.author = author.strip()\n                s.detail_item = id.strip()\n                s.price = price.strip()\n                s.drm = SearchResult.DRM_UNLOCKED\n                s.formats = formats.strip()\n                s.cover_url = cover.strip()\n                yield s\n\n    def get_details(self, search_result, timeout):\n        return True\n",
  "ebook_nl": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 2  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom contextlib import closing\n\ntry:\n    from urllib.parse import quote\nexcept ImportError:\n    from urllib import quote\n\nfrom lxml import html\nfrom qt.core import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass EBookNLStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'http://www.ebook.nl/'\n        url_details = ('http://www.ebook.nl/store/{0}')\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = url_details.format(detail_item)\n            open_url(QUrl(url))\n        else:\n            detail_url = None\n            if detail_item:\n                detail_url = url_details.format(detail_item)\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = ('http://www.ebook.nl/store/advanced_search_result.php?keywords=' + quote(query))\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[@id=\"books\"]/div[@itemtype=\"http://schema.org/Book\"]'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('./meta[@itemprop=\"url\"]/@content')).strip()\n                if not id:\n                    continue\n                cover_url = 'http://www.ebook.nl/store/' + ''.join(data.xpath('.//img[@itemprop=\"image\"]/@src'))\n                title = ''.join(data.xpath('./span[@itemprop=\"name\"]/a/text()')).strip()\n                author = ''.join(data.xpath('./span[@itemprop=\"author\"]/a/text()')).strip()\n                if author == '&nbsp':\n                    author = ''\n                price = ''.join(data.xpath('.//span[@itemprop=\"price\"]//text()'))\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price\n                s.drm = SearchResult.DRM_UNKNOWN\n                s.detail_item = id\n\n                yield s\n\n    def get_details(self, search_result, timeout):\n        br = browser()\n        with closing(br.open(search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            formats = []\n            if idata.xpath('.//div[@id=\"book_detail_body\"]/ul/li[strong[contains(., \"Type\")]]/span[contains(., \"ePub\")]'):\n                if idata.xpath('.//div[@id=\"book_detail_body\"]/ul/li[strong[contains(., \"Type\")]]/span[contains(., \"EPUB3\")]'):\n                    formats.append('EPUB3')\n                else:\n                    formats.append('EPUB')\n            if idata.xpath('.//div[@id=\"book_detail_body\"]/ul/li[strong[contains(., \"Type\")]]/span[contains(., \"Pdf\")]'):\n                formats.append('PDF')\n            search_result.formats = ', '.join(formats)\n\n            if idata.xpath('.//div[@id=\"book_detail_body\"]/ul/li[strong[contains(., \"Type\")]]'\n                           '//span[@class=\"ePubAdobeDRM\" or @class=\"ePubwatermerk\" or'\n                           ' @class=\"Pdfwatermark\" or @class=\"PdfAdobeDRM\"]'):\n                search_result.drm = SearchResult.DRM_LOCKED\n            if idata.xpath('.//div[@id=\"book_detail_body\"]/ul/li[strong[contains(., \"Type\")]]//span[@class=\"ePubzonderDRM\"]'):\n                search_result.drm = SearchResult.DRM_UNLOCKED\n        return True\n",
  "ebookpoint": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 9  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2023, Tomasz D≈Çugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nfrom base64 import b64encode\nfrom contextlib import closing\n\ntry:\n    from urllib.parse import quote_plus\nexcept ImportError:\n    from urllib import quote_plus\n\nfrom lxml import html\nfrom qt.core import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\ndef as_base64(data):\n    if not isinstance(data, bytes):\n        data = data.encode('utf-8')\n    ans = b64encode(data)\n    if isinstance(ans, bytes):\n        ans = ans.decode('ascii')\n    return ans\n\n\nclass EbookpointStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        aff_root = 'https://www.a4b-tracking.com/pl/stat-click-text-link/32/58/'\n\n        url = 'http://ebookpoint.pl/'\n\n        aff_url = aff_root + as_base64(url)\n\n        detail_url = None\n        if detail_item:\n            detail_url = aff_root + as_base64(detail_item)\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else aff_url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url if detail_url else aff_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=25, timeout=60):\n        url = 'http://ebookpoint.pl/search?qa=&szukaj=' + quote_plus(\n            query.decode('utf-8').encode('iso-8859-2')) + '&serwisyall=0&wprzyg=0&wsprzed=1&wyczerp=0&formaty=em-p'\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//ul[@class=\"list\"]/li'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('./a/@href'))\n                if not id:\n                    continue\n\n                formats = ', '.join(data.xpath('.//ul[@class=\"book-type book-type-points\"]//span[@class=\"popup\"]/span/text()'))\n                cover_url = ''.join(data.xpath('.//p[@class=\"cover  \"]/img/@data-src'))\n                title = ''.join(data.xpath('.//div[@class=\"book-info\"]/h3/a[1]/text()'))\n                author = ''.join(data.xpath('.//p[@class=\"author\"]//text()'))\n                price = ''.join(data.xpath('.//p[@class=\"price price-incart\"]/a/ins/text()|.//p[@class=\"price price-add\"]/a/text()'))\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = re.sub(r'\\.',',',price)\n                s.detail_item = id.strip()\n                s.drm = SearchResult.DRM_UNLOCKED\n                s.formats = formats.upper()\n\n                yield s\n",
  "ebooks_com": "# -*-\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 4  # Needed for dynamic plugin loading\n\nimport re\nfrom contextlib import closing\n\ntry:\n    from urllib.parse import quote_plus\nexcept ImportError:\n    from urllib import quote_plus\n\nfrom qt.core import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\ndef absolutize(url):\n    if url.startswith('/'):\n        url = 'https://www.ebooks.com' + url\n    return url\n\n\ndef search_ec(query, max_results=10, timeout=60, write_html_to=''):\n    import json\n    from urllib.parse import parse_qs, urlparse\n    url = 'https://www.ebooks.com/SearchApp/SearchResults.net?term=' + quote_plus(query)\n    br = browser()\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n    if write_html_to:\n        with open(write_html_to, 'wb') as d:\n            d.write(raw)\n    api = re.search(r'data-endpoint=\"(/api/search/.+?)\"', raw.decode('utf-8')).group(1)\n    counter = max_results\n    url = absolutize(api)\n    cc = parse_qs(urlparse(url).query)['CountryCode'][0]\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n    if write_html_to:\n        with open(write_html_to + '.json', 'wb') as d:\n            d.write(raw)\n    data = json.loads(raw)\n    for book in data['books']:\n        if counter <= 0:\n            break\n        counter -= 1\n        s = SearchResult()\n        s.cover_url = absolutize(book['image_url'])\n        s.title = book['title']\n        s.author = ' & '.join(x['name'] for x in book['authors'])\n        s.price = book['price']\n        s.detail_item = absolutize(book['book_url'])\n        s.ebooks_com_api_url = 'https://www.ebooks.com/api/book/?bookId={}&countryCode={}'.format(book[\"id\"], cc)\n        s.drm = SearchResult.DRM_UNKNOWN\n        yield s\n\n\ndef ec_details(search_result, timeout=30, write_data_to=''):\n    import json\n    br = browser()\n    with closing(br.open(search_result.ebooks_com_api_url, timeout=timeout)) as f:\n        raw = f.read()\n    if write_data_to:\n        with open(write_data_to, 'wb') as d:\n            d.write(raw)\n    data = json.loads(raw)\n    if 'drm' in data and 'drm_free' in data['drm']:\n        search_result.drm = SearchResult.DRM_UNLOCKED if data['drm']['drm_free'] else SearchResult.DRM_LOCKED\n    fmts = []\n    for x in data['information']['formats']:\n        x = x.split()[0]\n        fmts.append(x)\n    if fmts:\n        search_result.formats = ', '.join(fmts).upper()\n\n\nclass EbookscomStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        m_url = 'http://www.dpbolvw.net/'\n        h_click = 'click-4913808-10364500'\n        d_click = 'click-4913808-10281551'\n\n        url = m_url + h_click\n        detail_url = None\n        if detail_item:\n            detail_url = m_url + d_click + detail_item\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        yield from search_ec(query, max_results, timeout)\n\n    def get_details(self, search_result, timeout):\n        ec_details(search_result, timeout)\n        return True\n\n\nif __name__ == '__main__':\n    import sys\n    results = tuple(search_ec(' '.join(sys.argv[1:]), write_html_to='/t/ec.html'))\n    for result in results:\n        print(result)\n    ec_details(results[0], write_data_to='/t/ecd.json')\n    print('-'*80)\n    print(results[0])\n",
  "ebooksgratuits": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 1  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2012, Florent FAYOLLE <florent.fayolle69@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.opensearch_store import OpenSearchOPDSStore\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.utils.filenames import ascii_text\n\n\nclass EbooksGratuitsStore(BasicStoreConfig, OpenSearchOPDSStore):\n\n    open_search_url = 'http://www.ebooksgratuits.com/opds/opensearch.xml'\n    web_url = 'http://www.ebooksgratuits.com/'\n\n    def strip_accents(self, s):\n        return ascii_text(s)\n\n    def search(self, query, max_results=10, timeout=60):\n        query = self.strip_accents(type(u'')(query))\n        for s in OpenSearchOPDSStore.search(self, query, max_results, timeout):\n            if s.downloads:\n                s.drm = SearchResult.DRM_UNLOCKED\n                s.price = '$0.00'\n                yield s\n",
  "ebookshoppe_uk": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 1  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\ntry:\n    from urllib.parse import quote\nexcept ImportError:\n    from urllib2 import quote\nfrom contextlib import closing\n\nfrom lxml import html\nfrom qt.core import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass EBookShoppeUKStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url_details = 'http://www.awin1.com/cread.php?awinmid=1414&awinaffid=120917&clickref=&p={0}'\n        url = 'http://www.awin1.com/awclick.php?mid=2666&id=120917'\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = url_details.format(detail_item)\n            open_url(QUrl(url))\n        else:\n            detail_url = None\n            if detail_item:\n                detail_url = url_details.format(detail_item)\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.ebookshoppe.com/search.php?search_query=' + quote(query)\n        br = browser()\n        br.addheaders = [(\"Referer\", \"http://www.ebookshoppe.com/\")]\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//ul[@class=\"ProductList\"]/li'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('./div[@class=\"ProductDetails\"]/'\n                                        'strong/a/@href')).strip()\n                if not id:\n                    continue\n                cover_url = ''.join(data.xpath('./div[@class=\"ProductImage\"]/a/img/@src'))\n                title = ''.join(data.xpath('./div[@class=\"ProductDetails\"]/strong/a/text()'))\n                price = ''.join(data.xpath('./div[@class=\"ProductPriceRating\"]/em/text()'))\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.price = price\n                s.drm = SearchResult.DRM_UNLOCKED\n                s.detail_item = id\n\n                self.get_author_and_formats(s, timeout)\n                if not s.author:\n                    continue\n\n                yield s\n\n    def get_author_and_formats(self, search_result, timeout):\n        br = browser()\n        with closing(br.open(search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            author = ''.join(idata.xpath('//div[@id=\"ProductOtherDetails\"]/dl/dd[1]/text()'))\n            if author:\n                search_result.author = author\n            formats = idata.xpath('//dl[@class=\"ProductAddToCart\"]/dd/'\n                                  'ul[@class=\"ProductOptionList\"]/li/label/text()')\n            if formats:\n                search_result.formats = ', '.join(formats)\n            search_result.drm = SearchResult.DRM_UNKNOWN\n        return True\n",
  "empik": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 10  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2023, Tomasz D≈Çugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom base64 import b64encode\nfrom contextlib import closing\n\ntry:\n    from urllib.parse import quote\nexcept ImportError:\n    from urllib import quote\n\nfrom lxml import html\nfrom qt.core import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\ndef as_base64(data):\n    if not isinstance(data, bytes):\n        data = data.encode('utf-8')\n    ans = b64encode(data)\n    if isinstance(ans, bytes):\n        ans = ans.decode('ascii')\n    return ans\n\n\nclass EmpikStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        aff_root = 'https://www.a4b-tracking.com/pl/stat-click-text-link/78/58/'\n\n        url = 'https://www.empik.com/ebooki'\n\n        aff_url = aff_root + as_base64(url)\n\n        detail_url = None\n        if detail_item:\n            detail_url = aff_root + as_base64(detail_item)\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else aff_url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url if detail_url else aff_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'https://www.empik.com/ebooki/ebooki,3501,s?sort=scoreDesc&resultsPP={}&q={}'.format(max_results, quote(query))\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[@class=\"search-content js-search-content\"]/div'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//a[@class=\"img seoImage\"]/@href'))\n                if not id:\n                    continue\n\n                title = ''.join(data.xpath('.//h2[@class=\"product-title\"]/a/strong/text()'))\n                author = ', '.join(data.xpath('.//a[@class=\"smartAuthor \"]/text()'))\n                cover_url = ''.join(data.xpath('.//a/img[@class=\"lazy\"]/@lazy-img'))\n                price = ''.join(data.xpath('.//div[@class=\"price ta-price-tile \"]/text()'))\n\n                # with closing(br.open('https://empik.com' + id.strip(), timeout=timeout/4)) as nf:\n                #    idata = html.fromstring(nf.read())\n                #    crawled = idata.xpath('.//a[(@class=\"chosen hrefstyle\") or (@class=\"connectionsLink hrefstyle\")]/text()')\n                #    formats = ','.join([re.sub('ebook, ','', x.strip()) for x in crawled if 'ebook' in x])\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.split(' ¬†-¬†')[0]\n                s.author = author.strip()\n                s.price = price.strip()\n                s.detail_item = 'https://empik.com' + id.strip()\n                # s.formats = formats.upper().strip()\n\n                yield s\n",
  "feedbooks": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 1  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.opensearch_store import OpenSearchOPDSStore\nfrom calibre.gui2.store.search_result import SearchResult\n\n\nclass FeedbooksStore(BasicStoreConfig, OpenSearchOPDSStore):\n\n    open_search_url = 'http://assets0.feedbooks.net/opensearch.xml?t=1253087147'\n    web_url = 'http://feedbooks.com/'\n\n    # http://www.feedbooks.com/catalog\n\n    def search(self, query, max_results=10, timeout=60):\n        for s in OpenSearchOPDSStore.search(self, query, max_results, timeout):\n            if s.downloads:\n                s.drm = SearchResult.DRM_UNLOCKED\n                s.price = '$0.00'\n            else:\n                s.drm = SearchResult.DRM_LOCKED\n                s.formats = 'EPUB'\n            yield s\n",
  "google_books": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 7  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom contextlib import closing\n\ntry:\n    from urllib.parse import quote_plus\nexcept ImportError:\n    from urllib import quote_plus\n\nfrom lxml import html\nfrom qt.core import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\ndef parse_html(raw):\n    try:\n        from html5_parser import parse\n    except ImportError:\n        # Old versions of calibre\n        import html5lib\n        return html5lib.parse(raw, treebuilder='lxml', namespaceHTMLElements=False)\n    else:\n        return parse(raw)\n\n\ndef search_google(query, max_results=10, timeout=60, write_html_to=None):\n    url = 'https://www.google.com/search?tbm=bks&q=' + quote_plus(query)\n\n    br = browser()\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        doc = parse_html(raw)\n        if write_html_to is not None:\n            praw = html.tostring(doc, encoding='utf-8')\n            open(write_html_to, 'wb').write(praw)\n        for data in doc.xpath('//div[@id=\"rso\"]/div'):\n            if counter <= 0:\n                break\n            h3 = data.xpath('descendant::h3')\n            if not h3:\n                continue\n            h3 = h3[0]\n            a = h3.getparent()\n            id = a.get('href')\n            if not id:\n                continue\n\n            title = ''.join(data.xpath('.//h3//text()')).strip()\n            authors = data.xpath('descendant::a[@class=\"fl\" and @href]//text()')\n            while authors and authors[-1].strip().lower() in ('preview', 'read', 'more editions'):\n                authors = authors[:-1]\n            if not authors:\n                continue\n            author = ' & '.join(authors)\n\n            counter -= 1\n\n            s = SearchResult()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.detail_item = id.strip()\n            s.drm = SearchResult.DRM_UNKNOWN\n\n            yield s\n\n\nclass GoogleBooksStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'https://books.google.com/books'\n        if True or external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_item if detail_item else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_item)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_google(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        br = browser()\n        with closing(br.open(search_result.detail_item, timeout=timeout)) as nf:\n            doc = parse_html(nf.read())\n\n            search_result.cover_url = ''.join(doc.xpath('//div[@class=\"sidebarcover\"]//img/@src'))\n\n            # Try to get the set price.\n            price = ''.join(doc.xpath('//div[@id=\"gb-get-book-container\"]//a/text()'))\n            if 'read' in price.lower():\n                price = 'Unknown'\n            elif 'free' in price.lower() or not price.strip():\n                price = '$0.00'\n            elif '-' in price:\n                a, b, price = price.partition(' - ')\n            search_result.price = price.strip()\n\n            search_result.formats = ', '.join(doc.xpath('//div[contains(@class, \"download-panel-div\")]//a/text()')).upper()\n            if not search_result.formats:\n                search_result.formats = _('Unknown')\n\n        return True\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search_google(' '.join(sys.argv[1:]), write_html_to='/t/google.html'):\n        print(result)\n",
  "kobo": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 12  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\ntry:\n    from urllib.parse import quote_plus\nexcept ImportError:\n    from urllib import quote_plus\n\nfrom lxml import etree, html\n\nfrom calibre import url_slash_cleaner\nfrom calibre.ebooks.metadata import authors_to_string\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\ndef read_url(url, timeout=60):\n    # Kobo uses Akamai which has some bot detection that uses network/tls\n    # protocol data. So use the Chromium network stack to make the request\n    from calibre.scraper.simple import read_url as ru\n    return ru(read_url.storage, url, timeout=timeout)\n\n\nread_url.storage = []\n\n\ndef search_kobo(query, max_results=10, timeout=60, write_html_to=None):\n    from css_selectors import Select\n    url = 'https://www.kobobooks.com/search/search.html?q=' + quote_plus(query)\n    raw = read_url(url, timeout=timeout)\n    if write_html_to is not None:\n        with open(write_html_to, 'w') as f:\n            f.write(raw)\n    doc = html.fromstring(raw)\n    select = Select(doc)\n    for i, item in enumerate(select('[data-testid=search-results-items] [role=listitem]')):\n        if i == max_results:\n            break\n        for img in select('img[data-testid=cover]', item):\n            cover_url = img.get('src')\n            if cover_url.startswith('//'):\n                cover_url = 'https:' + cover_url\n            break\n        else:\n            cover_url = None\n\n        for a in select('h2 a[data-testid=title]', item):\n            title = etree.tostring(a, method='text', encoding='unicode').strip()\n            url = a.get('href')\n            break\n        else:\n            title = None\n        if title:\n            for p in select('p.subtitle', item):\n                title += ' - ' + etree.tostring(p, method='text', encoding='unicode').strip()\n\n        authors = []\n        for a in select('[data-testid=authors]', item):\n            authors.append(etree.tostring(a, method='text', encoding='unicode').strip())\n        authors = authors_to_string(authors)\n\n        for p in select('[data-testid=price-value]', item):\n            price = etree.tostring(p, method='text', encoding='unicode').strip()\n            break\n        else:\n            price = None\n\n        if title and authors and url:\n            s = SearchResult()\n            s.cover_url = cover_url\n            s.store_name = 'Kobo'\n            s.title = title\n            s.author = authors\n            s.price = price\n            s.detail_item = url\n            s.formats = 'EPUB'\n            s.drm = SearchResult.DRM_UNKNOWN\n\n            yield s\n\n\nclass KoboStore(BasicStoreConfig, StorePlugin):\n\n    minimum_calibre_version = (5, 40, 1)\n\n    def open(self, parent=None, detail_item=None, external=False):\n        if detail_item:\n            purl = detail_item\n            url = purl\n        else:\n            purl = None\n            url = 'https://kobo.com'\n\n        if external or self.config.get('open_external', False):\n            open_url(url_slash_cleaner(url))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, purl)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_kobo(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        raw = read_url(search_result.detail_item, timeout=timeout)\n        idata = html.fromstring(raw)\n        if idata.xpath('boolean(//div[@class=\"bookitem-secondary-metadata\"]//li[contains(text(), \"Download options\")])'):\n            if idata.xpath('boolean(//div[@class=\"bookitem-secondary-metadata\"]//li[contains(text(), \"DRM-Free\")])'):\n                search_result.drm = SearchResult.DRM_UNLOCKED\n            if idata.xpath('boolean(//div[@class=\"bookitem-secondary-metadata\"]//li[contains(text(), \"Adobe DRM\")])'):\n                search_result.drm = SearchResult.DRM_LOCKED\n        else:\n            search_result.drm = SearchResult.DRM_UNKNOWN\n        return True\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search_kobo(' '.join(sys.argv[1:]), write_html_to='/t/kobo.html'):\n        print(result)\n",
  "legimi": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 12  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2023, Tomasz D≈Çugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom base64 import b64encode\nfrom contextlib import closing\n\ntry:\n    from urllib.parse import quote_plus\nexcept ImportError:\n    from urllib import quote_plus\n\nfrom lxml import html\nfrom qt.core import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\ndef as_base64(data):\n    if not isinstance(data, bytes):\n        data = data.encode('utf-8')\n    ans = b64encode(data)\n    if isinstance(ans, bytes):\n        ans = ans.decode('ascii')\n    return ans\n\n\nclass LegimiStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        aff_root = 'https://www.a4b-tracking.com/pl/stat-click-text-link/9/58/'\n\n        url = 'https://www.legimi.pl/ebooki/'\n\n        aff_url = aff_root + as_base64(url)\n\n        detail_url = None\n        if detail_item:\n            detail_url = aff_root + as_base64(detail_item)\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else aff_url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url if detail_url else aff_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'https://www.legimi.pl/ebooki/?sort=score&filters=ebooks&searchphrase=' + quote_plus(query)\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[@class=\"book-search row auto-clear\"]/div'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//div[@class=\"panel-body\"]/a/@href'))\n                if not id:\n                    continue\n\n                cover_url = ''.join(data.xpath('.//div[@class=\"img-content\"]/img/@data-src'))\n                title = ''.join(data.xpath('.//a[@class=\"book-title clampBookTitle\"]/text()'))\n                author = ' '.join(data.xpath('.//div[@class=\"authors-container clampBookAuthors\"]/a/text()'))\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.detail_item = 'https://www.legimi.pl' + id.strip()\n                s.drm = SearchResult.DRM_UNLOCKED\n\n                yield s\n\n    def get_details(self, search_result, timeout):\n        br = browser()\n        with closing(br.open(search_result.detail_item, timeout=timeout/2)) as nf:\n            idata = html.fromstring(nf.read())\n\n            price = ''.join(idata.xpath('.//section[@class=\"book-sale-options\"]//li[@data-test=\"ebook-retail-option\"]//p[@class=\"light-text\"]/text()'))\n            search_result.price = price.split('bez abonamentu ')[-1]\n        return True\n",
  "libri_de": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 8  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom contextlib import closing\n\ntry:\n    from urllib.parse import quote\nexcept ImportError:\n    from urllib import quote\n\nfrom lxml import html\nfrom qt.core import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass LibreDEStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'https://clk.tradedoubler.com/click?p=324630&a=3252627'\n        url_details = ('https://clk.tradedoubler.com/click?p=324630&a=3252627'\n                       '&url=https%3A%2F%2Fwww.ebook.de%2Fshop%2Faction%2FproductDetails%3FartiId%3D{0}')\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = url_details.format(detail_item)\n            open_url(QUrl(url))\n        else:\n            detail_url = None\n            if detail_item:\n                detail_url = url_details.format(detail_item)\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = ('http://www.ebook.de/de/pathSearch?nav=52122&searchString=' + quote(query))\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[@class=\"articlecontainer\"]'):\n                if counter <= 0:\n                    break\n                id_ = ''.join(data.xpath('.//div[@class=\"trackArtiId\"]/text()'))\n                if not id_:\n                    continue\n                details = data.xpath('./div[contains(@class, \"articleinfobox\")]')\n                if not details:\n                    continue\n                details = details[0]\n                title = ''.join(details.xpath('./div[@class=\"title\"]/a/text()')).strip()\n                author = ''.join(details.xpath('.//div[@class=\"author\"]/text()')).strip()\n                if author.startswith('von'):\n                    author = author[4:]\n\n                pdf = details.xpath(\n                        'boolean(.//span[@class=\"bindername\" and contains(text(), \"pdf\")]/text())')\n                epub = details.xpath(\n                        'boolean(.//span[@class=\"bindername\" and contains(text(), \"epub\")]/text())')\n                mobi = details.xpath(\n                        'boolean(.//span[@class=\"bindername\" and contains(text(), \"mobipocket\")]/text())')\n\n                cover_url = ''.join(data.xpath('.//div[@class=\"coverimg\"]/a/img/@src'))\n                price = ''.join(data.xpath('.//div[@class=\"preis\"]/text()')).replace('*', '').strip()\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price\n                s.drm = SearchResult.DRM_UNKNOWN\n                s.detail_item = id_\n                formats = []\n                if epub:\n                    formats.append('ePub')\n                if pdf:\n                    formats.append('PDF')\n                if mobi:\n                    formats.append('MOBI')\n                s.formats = ', '.join(formats)\n\n                yield s\n",
  "litres": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 2  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, Roman Mukhin <ramses_ru at hotmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport random\nimport re\n\ntry:\n    from urllib.parse import quote\nexcept ImportError:\n    from urllib import quote\n\nfrom contextlib import closing\n\nfrom lxml import etree\nfrom qt.core import QUrl\n\nfrom calibre import browser, prints, url_slash_cleaner\nfrom calibre.ebooks.chardet import xml_to_unicode\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass LitResStore(BasicStoreConfig, StorePlugin):\n    shop_url = u'http://www.litres.ru'\n    # http://robot.litres.ru/pages/biblio_book/?art=174405\n\n    def open(self, parent=None, detail_item=None, external=False):\n\n        aff_id = u'?' + _get_affiliate_id()\n\n        url = self.shop_url + aff_id\n        detail_url = None\n        if detail_item:\n            # http://www.litres.ru/pages/biblio_book/?art=157074\n            detail_url = self.shop_url + u'/pages/biblio_book/' + aff_id +\\\n                u'&art=' + quote(detail_item)\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        search_url = u'http://robot.litres.ru/pages/catalit_browser/?checkpoint=2000-01-02&'\\\n        'search=%s&limit=0,%s'\n        search_url = search_url % (quote(query), max_results)\n\n        counter = max_results\n        br = browser()\n        br.addheaders.append(['Accept-Encoding','gzip'])\n\n        with closing(br.open(search_url, timeout=timeout)) as r:\n            ungzipResponse(r,br)\n            raw= xml_to_unicode(r.read(), strip_encoding_pats=True, assume_utf8=True)[0]\n\n            doc = etree.fromstring(raw, parser=etree.XMLParser(recover=True, no_network=True, resolve_entities=False))\n            for data in doc.xpath('//*[local-name() = \"fb2-book\"]'):\n                if counter <= 0:\n                    break\n                counter -= 1\n\n                try:\n                    sRes = self.create_search_result(data)\n                except Exception as e:\n                    prints('ERROR: cannot parse search result #%s: %s'%(max_results - counter + 1, e))\n                    continue\n                yield sRes\n\n    def get_details(self, search_result, timeout=60):\n        pass\n\n    def create_search_result(self, data):\n        xp_template = 'normalize-space(@{0})'\n\n        sRes = SearchResult()\n        sRes.drm = SearchResult.DRM_UNLOCKED\n        sRes.detail_item = data.xpath(xp_template.format('hub_id'))\n        sRes.title = data.xpath('string(.//title-info/book-title/text()|.//publish-info/book-name/text())')\n        # aut = concat('.//title-info/author/first-name', ' ')\n        authors = data.xpath('.//title-info/author/first-name/text()|'\n        './/title-info/author/middle-name/text()|'\n        './/title-info/author/last-name/text()')\n        sRes.author = u' '.join(map(type(u''), authors))\n        sRes.price = data.xpath(xp_template.format('price'))\n        # cover vs cover_preview\n        sRes.cover_url = data.xpath(xp_template.format('cover_preview'))\n        sRes.price = format_price_in_RUR(sRes.price)\n\n        types = data.xpath('//fb2-book//files/file/@type')\n        fmt_set = _parse_ebook_formats(' '.join(types))\n        sRes.formats = ', '.join(fmt_set)\n        return sRes\n\n\ndef format_price_in_RUR(price):\n    '''\n    Try to format price according ru locale: '12 212,34 —Ä—É–±.'\n    @param price: price in format like 25.99\n    @return: formatted price if possible otherwise original value\n    @rtype: unicode\n    '''\n    if price and re.match(r\"^\\d*?\\.\\d*?$\", price):\n        try:\n            price = u'{:,.2F} \\u20BD'.format(float(price))  # \\u20BD => —Ä—É–±.\n            price = price.replace(',', ' ').replace('.', ',', 1)\n        except:\n            pass\n    return price\n\n\ndef ungzipResponse(r,b):\n    headers = r.info()\n    if headers.get('Content-Encoding', '')=='gzip':\n        import gzip\n        gz = gzip.GzipFile(fileobj=r, mode='rb')\n        data = gz.read()\n        gz.close()\n        # headers[\"Content-type\"] = \"text/html; charset=utf-8\"\n        r.set_data(data)\n        b.set_response(r)\n\n\ndef _get_affiliate_id():\n    aff_id = u'3623565'\n    # Use Kovid's affiliate id 30% of the time.\n    if random.randint(1, 10) in (1, 2, 3):\n        aff_id = u'4084465'\n    return u'lfrom=' + aff_id\n\n\ndef _parse_ebook_formats(formatsStr):\n    '''\n    Creates a set with displayable names of the formats\n\n    :param formatsStr: string with comma separated book formats\n           as it provided by ozon.ru\n    :return: a list with displayable book formats\n    '''\n\n    formatsUnstruct = formatsStr.lower()\n    formats = set()\n    if 'fb2' in formatsUnstruct:\n        formats.add('FB2')\n    if 'html' in formatsUnstruct:\n        formats.add('HTML')\n    if 'txt' in formatsUnstruct:\n        formats.add('TXT')\n    if 'rtf' in formatsUnstruct:\n        formats.add('RTF')\n    if 'pdf' in formatsUnstruct:\n        formats.add('PDF')\n    if 'prc' in formatsUnstruct:\n        formats.add('PRC')\n    if 'lit' in formatsUnstruct:\n        formats.add('PRC')\n    if 'epub' in formatsUnstruct:\n        formats.add('ePub')\n    if 'rb' in formatsUnstruct:\n        formats.add('RB')\n    if 'isilo3' in formatsUnstruct:\n        formats.add('ISILO3')\n    if 'lrf' in formatsUnstruct:\n        formats.add('LRF')\n    if 'jar' in formatsUnstruct:\n        formats.add('JAR')\n    return formats\n",
  "manybooks": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 2  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport mimetypes\nfrom contextlib import closing\n\nfrom lxml import etree\n\nfrom calibre import browser\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.opensearch_store import OpenSearchOPDSStore\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.utils.opensearch.description import Description\nfrom calibre.utils.opensearch.query import Query\n\n\ndef search_manybooks(query, max_results=10, timeout=60, open_search_url='http://www.manybooks.net/opds/'):\n    '''\n    Manybooks uses a very strange opds feed. The opds\n    main feed is structured like a stanza feed. The\n    search result entries give very little information\n    and requires you to go to a detail link. The detail\n    link has the wrong type specified (text/html instead\n    of application/atom+xml).\n    '''\n\n    description = Description(open_search_url)\n    url_template = description.get_best_template()\n    if not url_template:\n        return\n    oquery = Query(url_template)\n\n    # set up initial values\n    oquery.searchTerms = query\n    oquery.count = max_results\n    url = oquery.url()\n\n    counter = max_results\n    br = browser()\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw_data = f.read()\n        raw_data = raw_data.decode('utf-8', 'replace')\n        doc = etree.fromstring(raw_data, parser=etree.XMLParser(recover=True, no_network=True, resolve_entities=False))\n        for data in doc.xpath('//*[local-name() = \"entry\"]'):\n            if counter <= 0:\n                break\n\n            counter -= 1\n\n            s = SearchResult()\n\n            detail_links = data.xpath('./*[local-name() = \"link\" and @type = \"text/html\"]')\n            if not detail_links:\n                continue\n            detail_link = detail_links[0]\n            detail_href = detail_link.get('href')\n            if not detail_href:\n                continue\n\n            s.detail_item = 'http://manybooks.net/titles/' + detail_href.split('tid=')[-1] + '.html'\n            # These can have HTML inside of them. We are going to get them again later\n            # just in case.\n            s.title = ''.join(data.xpath('./*[local-name() = \"title\"]//text()')).strip()\n            s.author = ', '.join(data.xpath('./*[local-name() = \"author\"]//text()')).strip()\n\n            # Follow the detail link to get the rest of the info.\n            with closing(br.open(detail_href, timeout=timeout/4)) as df:\n                ddoc = etree.fromstring(df.read(), parser=etree.XMLParser(recover=True, no_network=True, resolve_entities=False))\n                ddata = ddoc.xpath('//*[local-name() = \"entry\"][1]')\n                if ddata:\n                    ddata = ddata[0]\n\n                    # This is the real title and author info we want. We got\n                    # it previously just in case it's not specified here for some reason.\n                    s.title = ''.join(ddata.xpath('./*[local-name() = \"title\"]//text()')).strip()\n                    s.author = ', '.join(ddata.xpath('./*[local-name() = \"author\"]//text()')).strip()\n                    if s.author.startswith(','):\n                        s.author = s.author[1:]\n                    if s.author.endswith(','):\n                        s.author = s.author[:-1]\n\n                    s.cover_url = ''.join(ddata.xpath('./*[local-name() = \"link\" and @rel = \"http://opds-spec.org/thumbnail\"][1]/@href')).strip()\n\n                    for link in ddata.xpath('./*[local-name() = \"link\" and @rel = \"http://opds-spec.org/acquisition\"]'):\n                        type = link.get('type')\n                        href = link.get('href')\n                        if type:\n                            ext = mimetypes.guess_extension(type)\n                            if ext:\n                                ext = ext[1:].upper().strip()\n                                s.downloads[ext] = href\n\n            s.price = '$0.00'\n            s.drm = SearchResult.DRM_UNLOCKED\n            s.formats = 'EPUB, PDB (eReader, PalmDoc, zTXT, Plucker, iSilo), FB2, ZIP, AZW, MOBI, PRC, LIT, PKG, PDF, TXT, RB, RTF, LRF, TCR, JAR'\n\n            yield s\n\n\nclass ManyBooksStore(BasicStoreConfig, OpenSearchOPDSStore):\n\n    open_search_url = 'http://www.manybooks.net/opds/'\n    web_url = 'http://manybooks.net'\n\n    def search(self, query, max_results=10, timeout=60):\n        for r in search_manybooks(query, max_results=max_results, timeout=timeout, open_search_url=self.open_search_url):\n            yield r\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search_manybooks(' '.join(sys.argv[1:])):\n        print(result)\n",
  "mills_boon_uk": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 4  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom contextlib import closing\n\ntry:\n    from urllib.parse import quote\nexcept ImportError:\n    from urllib import quote\n\nfrom lxml import html\nfrom qt.core import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass MillsBoonUKStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'https://www.millsandboon.co.uk'\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = detail_item\n            open_url(QUrl(url_slash_cleaner(url)))\n        else:\n            if detail_item:\n                detail_url = detail_item\n            else:\n                detail_url = None\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        base_url = 'https://www.millsandboon.co.uk'\n        url = base_url + '/search.aspx??format=ebook&searchText=' + quote(query)\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//article[contains(@class, \"group\")]'):\n                if counter <= 0:\n                    break\n                id_ = ''.join(data.xpath('.//div[@class=\"img-wrapper\"]/a/@href')).strip()\n                if not id_:\n                    continue\n\n                cover_url = ''.join(data.xpath('.//div[@class=\"img-wrapper\"]/a/img/@src'))\n                title =  ''.join(data.xpath('.//div[@class=\"img-wrapper\"]/a/img/@alt')).strip()\n                author = ''.join(data.xpath('.//a[@class=\"author\"]/text()'))\n                price = ''.join(data.xpath('.//div[@class=\"type-wrapper\"]/ul/li[child::span[text()=\"eBook\"]]/a/text()'))\n                format_ = ''.join(data.xpath('.//p[@class=\"doc-meta-format\"]/span[last()]/text()'))\n                drm = SearchResult.DRM_LOCKED\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price\n                s.detail_item = id_\n                s.drm = drm\n                s.formats = format_\n\n                yield s\n",
  "nexto": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 7  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2023, Tomasz D≈Çugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nfrom base64 import standard_b64encode\nfrom contextlib import closing\n\ntry:\n    from urllib.parse import quote_plus\nexcept ImportError:\n    from urllib import quote_plus\n\nfrom lxml import html\nfrom qt.core import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\ndef as_base64(data):\n    if not isinstance(data, bytes):\n        data = data.encode('utf-8')\n    ans = standard_b64encode(data)\n    if isinstance(ans, bytes):\n        ans = ans.decode('ascii')\n    return ans\n\n\nclass NextoStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        aff_root = 'https://www.a4b-tracking.com/pl/stat-click-text-link/35/58/'\n\n        url = 'http://www.nexto.pl/'\n\n        aff_url = aff_root + as_base64(url)\n\n        detail_url = None\n        if detail_item:\n            book_id = re.search(r'p[0-9]*\\.xml\\Z', detail_item)\n            book_id = book_id.group(0).replace('.xml','').replace('p','')\n            if book_id:\n                detail_url = aff_root + as_base64('http://www.nexto.pl/rf/pr?p=' + book_id)\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else aff_url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url if detail_url else aff_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.nexto.pl/szukaj.xml?search-clause=' + quote_plus(query) + '&scid=1015'\n\n        br = browser()\n        offset=0\n\n        counter = max_results\n\n        while counter:\n            with closing(br.open(url + '&_offset={}'.format(offset), timeout=timeout)) as f:\n                doc = html.fromstring(f.read())\n                for data in doc.xpath('//ul[@class=\"productslist\"]/li'):\n                    if counter <= 0:\n                        break\n\n                    id = ''.join(data.xpath('.//div[@class=\"col-2\"]/a/@href'))\n                    if not id:\n                        continue\n\n                    price = ''.join(data.xpath('.//strong[@class=\"nprice\"]/text()'))\n\n                    cover_url = ''.join(data.xpath('.//picture[@class=\"cover\"]/img/@data-src'))\n                    cover_url = re.sub(r'%2F', '/', cover_url)\n                    cover_url = re.sub(r'widthMax=235&heightMax=335', 'widthMax=64&heightMax=64', cover_url)\n                    title = ''.join(data.xpath('.//a[@class=\"title\"]/text()'))\n                    title = re.sub(r' ‚Äì ebook', '', title)\n                    author = ', '.join(data.xpath('.//div[@class=\"col-7\"]//h4//a/text()'))\n                    formats = ', '.join(data.xpath('.//ul[@class=\"formats\"]/li//b/text()'))\n                    DrmFree = data.xpath('.//ul[@class=\"formats\"]/li//b[contains(@title, \"znak\")]')\n\n                    counter -= 1\n\n                    s = SearchResult()\n                    s.cover_url = cover_url if cover_url[:4] == 'http' else 'http://www.nexto.pl' + cover_url\n                    s.title = title.strip()\n                    s.author = author.strip()\n                    s.price = price.strip()\n                    s.detail_item = id.strip()\n                    s.drm = SearchResult.DRM_UNLOCKED if DrmFree else SearchResult.DRM_LOCKED\n                    s.formats = formats.upper().strip()\n\n                    yield s\n                if not doc.xpath('//div[@class=\"listnavigator\"]//a[@class=\"next\"]'):\n                    break\n            offset+=10\n",
  "ozon_ru": "# -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nstore_version = 3  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2013, Roman Mukhin <ramses_ru at hotmail.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom contextlib import closing\n\ntry:\n    from urllib.parse import quote_plus\nexcept ImportError:\n    from urllib import quote_plus\n\nfrom qt.core import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.ebooks.chardet import xml_to_unicode\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nshop_url = 'http://www.ozon.ru'\n\n\ndef parse_html(raw):\n    try:\n        from html5_parser import parse\n    except ImportError:\n        # Old versions of calibre\n        import html5lib\n        return html5lib.parse(raw, treebuilder='lxml', namespaceHTMLElements=False)\n    else:\n        return parse(raw)\n\n\ndef search(query, max_results=15, timeout=60):\n    url = 'http://www.ozon.ru/?context=search&text=%s&store=1,0&group=div_book' % quote_plus(query)\n\n    counter = max_results\n    br = browser()\n\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = xml_to_unicode(f.read(), strip_encoding_pats=True, assume_utf8=True)[0]\n        root = parse_html(raw)\n        for tile in root.xpath('//*[@class=\"bShelfTile inline\"]'):\n            if counter <= 0:\n                break\n            counter -= 1\n\n            s = SearchResult(store_name='OZON.ru')\n            s.detail_item = shop_url + tile.xpath('descendant::a[@class=\"eShelfTile_Link\"]/@href')[0]\n            s.title = tile.xpath('descendant::span[@class=\"eShelfTile_ItemNameText\"]/@title')[0]\n            s.author = tile.xpath('descendant::span[@class=\"eShelfTile_ItemPerson\"]/@title')[0]\n            s.price = ''.join(tile.xpath('descendant::div[contains(@class, \"eShelfTile_Price\")]/text()'))\n            s.cover_url = 'http:' + tile.xpath('descendant::img/@data-original')[0]\n            s.price = format_price_in_RUR(s.price)\n            yield s\n\n\nclass OzonRUStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = detail_item or shop_url\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(url)))\n        else:\n            d = WebStoreDialog(self.gui, shop_url, parent, url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec()\n\n    def search(self, query, max_results=15, timeout=60):\n        for s in search(query, max_results=max_results, timeout=timeout):\n            yield s\n\n\ndef format_price_in_RUR(price):\n    '''\n    Try to format price according ru locale: '12 212,34 —Ä—É–±.'\n    @param price: price in format like 25.99\n    @return: formatted price if possible otherwise original value\n    @rtype: unicode\n    '''\n    price = price.replace('\\xa0', '').replace(',', '.').strip() + ' py6'\n    return price\n\n\nif __name__ == '__main__':\n    import sys\n    for r in search(sys.argv[-1]):\n        print(r)\n"
}